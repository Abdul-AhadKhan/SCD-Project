package Views;

import Controllers.TeacherController;
import Models.Question;
import Models.RoundedBorder;

import javax.swing.*;
import java.sql.SQLException;
import java.util.ArrayList;

public class MakeQuiz extends JFrame {

    /**
     * Creates new form MakeQuiz
     */
    public MakeQuiz(String title, String className) throws SQLException, ClassNotFoundException {
        this.title = title;
        this.className = className;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() throws SQLException, ClassNotFoundException {

        jPanel1 = new JPanel();
        jLabel1 = new JLabel();
        jPanel2 = new JPanel();
        jPanel3 = new JPanel();
        jScrollPane1 = new JScrollPane();
        jTextArea1 = new JTextArea();
        OptionA = new JRadioButton();
        OptionB = new JRadioButton();
        OptionC = new JRadioButton();
        OptionD = new JRadioButton();
        OptionE = new JRadioButton();
        OptionF = new JRadioButton();
        OptionAField = new JTextField();
        OptionBField = new JTextField();
        OptionCField = new JTextField();
        OptionDField = new JTextField();
        OptionEField = new JTextField();
        OptionFField = new JTextField();
        Next = new JButton();
        Submit = new JButton();

        questions = new ArrayList<>();
        teacherController = new TeacherController();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setTitle("Make Quiz");

        jPanel1.setBackground(new java.awt.Color(148, 11, 146));

        jLabel1.setFont(new java.awt.Font("Snap ITC", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("TechTeach - Make Quiz");

        GroupLayout jPanel1Layout = new GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel1)
                                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addComponent(jLabel1)
                                .addContainerGap(18, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jPanel3.setBorder(new RoundedBorder(10));

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        OptionA.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OptionAItemStateChanged(evt);
            }
        });

        OptionB.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OptionBItemStateChanged(evt);
            }
        });

        OptionC.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OptionCItemStateChanged(evt);
            }
        });

        OptionD.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OptionDItemStateChanged(evt);
            }
        });

        OptionE.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OptionEItemStateChanged(evt);
            }
        });


        OptionF.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OptionFItemStateChanged(evt);
            }
        });


        OptionAField.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        OptionBField.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        OptionCField.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        OptionDField.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        OptionEField.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        OptionFField.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N


        GroupLayout jPanel3Layout = new GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
                jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane1)
                                        .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addGroup(jPanel3Layout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                                                        .addComponent(OptionE, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(OptionC, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(OptionB, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(OptionA, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(OptionF, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(OptionD, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                        .addComponent(OptionAField)
                                                        .addComponent(OptionBField)
                                                        .addComponent(OptionCField)
                                                        .addComponent(OptionFField, GroupLayout.PREFERRED_SIZE, 304, GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(OptionEField)
                                                        .addComponent(OptionDField))
                                                .addGap(376, 376, 376)))
                                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
                jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 102, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                        .addComponent(OptionAField)
                                        .addComponent(OptionA, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                                .addGroup(jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                        .addComponent(OptionBField)
                                        .addComponent(OptionB, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                        .addComponent(OptionCField)
                                        .addComponent(OptionC, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                                .addGroup(jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addComponent(OptionD, GroupLayout.PREFERRED_SIZE, 23, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(OptionDField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                        .addComponent(OptionEField)
                                        .addComponent(OptionE, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                                .addGroup(jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                        .addComponent(OptionFField)
                                        .addComponent(OptionF, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap(24, Short.MAX_VALUE))
        );


        Next.setBackground(new java.awt.Color(148, 11, 146));
        Next.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        Next.setForeground(new java.awt.Color(255, 255, 255));
        Next.setText("Next");
        Next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NextActionPerformed(evt);
            }
        });

        Submit.setBackground(new java.awt.Color(148, 11, 146));
        Submit.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        Submit.setForeground(new java.awt.Color(255, 255, 255));
        Submit.setText("Submit");
        Submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    SubmitActionPerformed(evt);
                } catch (SQLException e) {
                    throw new RuntimeException(e);
                }
            }
        });

        GroupLayout jPanel2Layout = new GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addComponent(jPanel3, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                                .addGap(0, 0, Short.MAX_VALUE)
                                                .addComponent(Next, GroupLayout.PREFERRED_SIZE, 101, GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(Submit, GroupLayout.PREFERRED_SIZE, 102, GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(jPanel3, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(Next)
                                        .addComponent(Submit))
                                .addGap(18, 18, 18))
        );

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                        .addComponent(jPanel2, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jPanel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel2, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
        );

        pack();
    }// </editor-fold>

    private void OptionAItemStateChanged(java.awt.event.ItemEvent evt) {
        if (OptionA.isSelected()){
            if (OptionAField.getText().isEmpty()){
                JOptionPane.showConfirmDialog(null, "Empty Field Option Selected", "Error", JOptionPane.OK_CANCEL_OPTION, JOptionPane.ERROR_MESSAGE);
                OptionA.setSelected(false);
            }
        }
    }

    private void OptionBItemStateChanged(java.awt.event.ItemEvent evt) {
        if (OptionB.isSelected()){
            if (OptionBField.getText().isEmpty()){
                JOptionPane.showConfirmDialog(null, "Empty Field Option Selected", "Error", JOptionPane.OK_CANCEL_OPTION, JOptionPane.ERROR_MESSAGE);
                OptionB.setSelected(false);
            }
        }
    }

    private void OptionCItemStateChanged(java.awt.event.ItemEvent evt) {
        if (OptionC.isSelected()){
            if (OptionCField.getText().isEmpty()){
                JOptionPane.showConfirmDialog(null, "Empty Field Option Selected", "Error", JOptionPane.OK_CANCEL_OPTION, JOptionPane.ERROR_MESSAGE);
                OptionC.setSelected(false);
            }
        }
    }

    private void OptionDItemStateChanged(java.awt.event.ItemEvent evt) {
        if (OptionD.isSelected()){
            if (OptionDField.getText().isEmpty()){
                JOptionPane.showConfirmDialog(null, "Empty Field Option Selected", "Error", JOptionPane.OK_CANCEL_OPTION, JOptionPane.ERROR_MESSAGE);
                OptionD.setSelected(false);
            }
        }
    }

    private void OptionEItemStateChanged(java.awt.event.ItemEvent evt) {
        if (OptionE.isSelected()){
            if (OptionEField.getText().isEmpty()){
                JOptionPane.showConfirmDialog(null, "Empty Field Option Selected", "Error", JOptionPane.OK_CANCEL_OPTION, JOptionPane.ERROR_MESSAGE);
                OptionE.setSelected(false);
            }
        }
    }

    private void OptionFItemStateChanged(java.awt.event.ItemEvent evt) {
        if (OptionF.isSelected()){
            if (OptionFField.getText().isEmpty()){
                JOptionPane.showConfirmDialog(null, "Empty Field Option Selected", "Error", JOptionPane.OK_CANCEL_OPTION, JOptionPane.ERROR_MESSAGE);
                OptionF.setSelected(false);
            }
        }
    }

    private void SubmitActionPerformed(java.awt.event.ActionEvent evt) throws SQLException {

        if (questions.size() < 5){
            JOptionPane.showConfirmDialog(null, "Minimum 5 Questions Are Required For Quiz", "Error", JOptionPane.OK_CANCEL_OPTION, JOptionPane.ERROR_MESSAGE);
        }
        else{
            if (teacherController.postQuiz(title, className, questions)){
                JOptionPane.showConfirmDialog(null, "Quiz Posted Successfully", "Success", JOptionPane.OK_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE);
                dispose();
            }
        }
    }
    private void NextActionPerformed(java.awt.event.ActionEvent evt) {

        if (jTextArea1.getText().isEmpty()) {
            JOptionPane.showConfirmDialog(null, "Write Question Before Moving to Next", "Error", JOptionPane.OK_CANCEL_OPTION, JOptionPane.ERROR_MESSAGE);
        } else {
            int count = 0;
            if (!OptionAField.getText().isEmpty()) {
                count++;
            }
            if (!OptionBField.getText().isEmpty()) {
                count++;
            }
            if (!OptionCField.getText().isEmpty()) {
                count++;
            }
            if (!OptionDField.getText().isEmpty()) {
                count++;
            }
            if (!OptionEField.getText().isEmpty()) {
                count++;
            }
            if (!OptionFField.getText().isEmpty()) {
                count++;
            }
            if (count < 2) {
                JOptionPane.showConfirmDialog(null, "Less Options Given", "Error", JOptionPane.OK_CANCEL_OPTION, JOptionPane.ERROR_MESSAGE);
            }
            if (!OptionA.isSelected() && !OptionB.isSelected() && !OptionC.isSelected() && !OptionD.isSelected() && !OptionE.isSelected() && !OptionF.isSelected()) {
                JOptionPane.showConfirmDialog(null, "No Option Selected", "Error", JOptionPane.OK_CANCEL_OPTION, JOptionPane.ERROR_MESSAGE);
            } else {

                Question question = new Question();
                question.question = jTextArea1.getText().trim();
                question.answers.answer_a = OptionAField.getText().trim();
                question.answers.answer_b = OptionBField.getText().trim();
                question.answers.answer_c = OptionCField.getText().trim();
                question.answers.answer_d = OptionDField.getText().trim();
                question.answers.answer_e = OptionEField.getText().trim();
                question.answers.answer_f = OptionFField.getText().trim();

                if (OptionA.isSelected())
                    question.correct_answers.answer_a_correct = true;
                if (OptionB.isSelected())
                    question.correct_answers.answer_b_correct = true;
                if (OptionC.isSelected())
                    question.correct_answers.answer_c_correct = true;
                if (OptionD.isSelected())
                    question.correct_answers.answer_d_correct = true;
                if (OptionE.isSelected())
                    question.correct_answers.answer_e_correct = true;
                if (OptionF.isSelected())
                    question.correct_answers.answer_f_correct = true;

                questions.add(question);

                jTextArea1.setText("");

                OptionAField.setText("");
                OptionBField.setText("");
                OptionCField.setText("");
                OptionDField.setText("");
                OptionEField.setText("");
                OptionFField.setText("");

                OptionA.setSelected(false);
                OptionB.setSelected(false);
                OptionC.setSelected(false);
                OptionD.setSelected(false);
                OptionE.setSelected(false);
                OptionF.setSelected(false);


            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MakeQuiz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MakeQuiz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MakeQuiz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MakeQuiz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new MakeQuiz("", "").setVisible(true);
                } catch (SQLException | ClassNotFoundException e) {
                    throw new RuntimeException(e);
                }
            }
        });
    }

    // Variables declaration - do not modify
    private JButton Next;
    private JRadioButton OptionA;
    private JTextField OptionAField;
    private JRadioButton OptionB;
    private JTextField OptionBField;
    private JRadioButton OptionC;
    private JTextField OptionCField;
    private JRadioButton OptionD;
    private JTextField OptionDField;
    private JRadioButton OptionE;
    private JTextField OptionEField;
    private JRadioButton OptionF;
    private JTextField OptionFField;
    private JButton Submit;
    private JLabel jLabel1;
    private JPanel jPanel1;
    private JPanel jPanel2;
    private JPanel jPanel3;
    private JScrollPane jScrollPane1;
    private JTextArea jTextArea1;
    private String title;
    private String className;
    private ArrayList<Question> questions;
    private TeacherController teacherController;
    // End of variables declaration
}
