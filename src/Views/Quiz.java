package Views;

import Controllers.StudentController;
import Models.Question;
import Models.ScrollPaneWin11;
import Models.RoundedBorder;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.SQLException;
import java.util.List;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;

public class Quiz extends JFrame {

    /**
     * Creates new form TakeQuiz
     */
    public Quiz(String title, String className) throws SQLException, ClassNotFoundException {
        this.title = title;
        this.className = className;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() throws SQLException, ClassNotFoundException {

        buttonGroup1 = new ButtonGroup();
        jPanel1 = new JPanel();
        jLabel1 = new JLabel();
        jScrollPane2 = new ScrollPaneWin11();
        jPanel2 = new JPanel();
        jPanel3 = new JPanel();
        jScrollPane1 = new JScrollPane();
        jTextArea1 = new JTextArea();
        jRadioButton1 = new JRadioButton();
        jRadioButton2 = new JRadioButton();
        jRadioButton3 = new JRadioButton();
        jRadioButton4 = new JRadioButton();
        jRadioButton5 = new JRadioButton();
        jRadioButton6 = new JRadioButton();

        studentController = new StudentController();

        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Quiz");

        jPanel1.setBackground(new Color(91, 8, 136));

        jLabel1.setFont(new Font("Snap ITC", 1, 18)); // NOI18N
        jLabel1.setForeground(new Color(255, 255, 255));
        jLabel1.setText("TechTeach - Quiz");

        GroupLayout jPanel1Layout = new GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel1, GroupLayout.PREFERRED_SIZE, 193, GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addComponent(jLabel1)
                                .addContainerGap(18, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new Color(255, 255, 255));

        GroupLayout jPanel2Layout = new GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGap(0, 725, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGap(0, 414, Short.MAX_VALUE)
        );

        jScrollPane2.setViewportView(jPanel2);

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addComponent(jPanel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jScrollPane2, GroupLayout.DEFAULT_SIZE, 725, Short.MAX_VALUE))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, GroupLayout.DEFAULT_SIZE, 414, Short.MAX_VALUE)
                                .addContainerGap())
        );

        questions = studentController.getQuestions(title, className);
        correctAnswers = new boolean[questions.size()];

        jPanel2.setLayout(new BoxLayout(jPanel2, BoxLayout.Y_AXIS));
        for (int i = 0; i < questions.size(); i++){

            JPanel panel = new JPanel();
            panel.setBackground(Color.WHITE);
            panel.setBorder(new RoundedBorder(10));

            JRadioButton optionA = new JRadioButton("Option A");
            optionA.setFont(new Font("Times New Roman", 0, 14));
            optionA.setText(questions.get(i).answers.answer_a);
            if (questions.get(i).correct_answers.answer_a_correct){
                optionA.setFont(new Font("Times New Roman", 1, 14));
            }

            JRadioButton optionB = new JRadioButton("Option B");
            optionB.setFont(new Font("Times New Roman", 0, 14));
            optionB.setText(questions.get(i).answers.answer_b);
            if (questions.get(i).correct_answers.answer_b_correct){
                optionB.setFont(new Font("Times New Roman", 1, 14));
            }

            JRadioButton optionC = new JRadioButton("Option C");
            optionC.setFont(new Font("Times New Roman", 0, 14));
            optionC.setText(questions.get(i).answers.answer_c);
            if (questions.get(i).correct_answers.answer_c_correct){
                optionC.setFont(new Font("Times New Roman", 1, 14));
            }

            JRadioButton optionD = new JRadioButton("Option D");
            optionD.setFont(new Font("Times New Roman", 0, 14));
            optionD.setText(questions.get(i).answers.answer_d);
            if (questions.get(i).correct_answers.answer_d_correct){
                optionD.setFont(new Font("Times New Roman", 1, 14));
            }

            JRadioButton optionE = new JRadioButton("Option E");
            optionE.setFont(new Font("Times New Roman", 0, 14));
            optionE.setText(questions.get(i).answers.answer_e);
            if (questions.get(i).correct_answers.answer_e_correct){
                optionE.setFont(new Font("Times New Roman", 1, 14));
            }

            JRadioButton optionF = new JRadioButton("Option F");
            optionF.setFont(new Font("Times New Roman", 0, 14));
            optionF.setText(questions.get(i).answers.answer_f);
            if (questions.get(i).correct_answers.answer_f_correct){
                optionF.setFont(new Font("Times New Roman", 1, 14));
            }

            ButtonGroup buttonGroup = new ButtonGroup();
            buttonGroup.add(optionA);
            buttonGroup.add(optionB);
            buttonGroup.add(optionC);
            buttonGroup.add(optionD);
            buttonGroup.add(optionE);
            buttonGroup.add(optionF);

            JTextArea question  = new JTextArea();
            question.setEditable(false);
            question.setLineWrap(true);
            question.setCaretColor(Color.WHITE);
            question.setRows(5);
            question.setColumns(20);
            question.setFont(new Font("Times New Roman", 0, 14));
            question.setText(questions.get(i).question);

            JScrollPane scrollPane = new JScrollPane(question);
            int index = i;
            optionA.addItemListener(new ItemListener() {
                @Override
                public void itemStateChanged(ItemEvent e) {
                    if (e.getStateChange() == ItemEvent.SELECTED){
                        if (questions.get(index).correct_answers.answer_a_correct){
                            correctAnswers[index] = true;
                        }
                    }
                }
            });

            optionB.addItemListener(new ItemListener() {
                @Override
                public void itemStateChanged(ItemEvent e) {
                    if (questions.get(index).correct_answers.answer_b_correct){
                        correctAnswers[index] = true;
                    }
                }
            });

            optionC.addItemListener(new ItemListener() {
                @Override
                public void itemStateChanged(ItemEvent e) {
                    if (questions.get(index).correct_answers.answer_c_correct){
                        correctAnswers[index] = true;
                    }
                }
            });

            optionD.addItemListener(new ItemListener() {
                @Override
                public void itemStateChanged(ItemEvent e) {
                    if (questions.get(index).correct_answers.answer_d_correct){
                        correctAnswers[index] = true;
                    }
                }
            });

            optionE.addItemListener(new ItemListener() {
                @Override
                public void itemStateChanged(ItemEvent e) {
                    if (questions.get(index).correct_answers.answer_e_correct){
                        correctAnswers[index] = true;
                    }
                }
            });

            optionF.addItemListener(new ItemListener() {
                @Override
                public void itemStateChanged(ItemEvent e) {
                    if (questions.get(index).correct_answers.answer_f_correct){
                        correctAnswers[index] = true;
                    }
                }
            });


            GroupLayout jPanelLayout = new GroupLayout(panel);
            panel.setLayout(jPanelLayout);
            jPanelLayout.setHorizontalGroup(
                    jPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelLayout.createSequentialGroup()
                                    .addContainerGap()
                                    .addGroup(jPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                            .addComponent(scrollPane, GroupLayout.DEFAULT_SIZE, 693, Short.MAX_VALUE)
                                            .addGroup(jPanelLayout.createSequentialGroup()
                                                    .addGroup(jPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                                            .addComponent(optionF, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                            .addComponent(optionE)
                                                            .addComponent(optionA, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                            .addComponent(optionB, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                            .addComponent(optionC, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                            .addComponent(optionD, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                    .addGap(0, 0, Short.MAX_VALUE)))
                                    .addGap(14, 14, 14))
            );
            jPanelLayout.setVerticalGroup(
                    jPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelLayout.createSequentialGroup()
                                    .addGap(16, 16, 16)
                                    .addComponent(scrollPane, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(optionA)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(optionB)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(optionC)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(optionD)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(optionE)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(optionF)
                                    .addContainerGap(8, Short.MAX_VALUE))
            );

            jPanel2.add(Box.createVerticalStrut(10));
            jPanel2.add(panel);
        }
        jPanel2.add(Box.createVerticalStrut(20));

        JButton submit = new JButton("Submit");
        submit.setFont(new Font("Times New Roman", 0, 14));
        submit.setBackground(new Color(91, 8, 136));
        submit.setForeground(Color.WHITE);

        submit.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int count = 0;
                for (int i = 0; i < questions.size(); i++){
                    if (correctAnswers[i]){
                        count++;
                    }
                }
                int result = JOptionPane.showConfirmDialog(null, "You got " + count + " out of " + questions.size() + " right", "Result", JOptionPane.OK_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE);
                if (result == JOptionPane.OK_OPTION || result == JOptionPane.CANCEL_OPTION){
                    dispose();
                }
            }
        });
        jPanel2.add(submit);

        pack();
    }// </editor-fold>



    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | UnsupportedLookAndFeelException | IllegalAccessException |
                 InstantiationException ex) {
            java.util.logging.Logger.getLogger(Quiz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Quiz("","").setVisible(true);
                } catch (SQLException | ClassNotFoundException e) {
                    throw new RuntimeException(e);
                }
            }
        });
    }

    // Variables declaration - do not modify
    private ButtonGroup buttonGroup1;
    private JLabel jLabel1;
    private JPanel jPanel1;
    private JPanel jPanel2;
    private JPanel jPanel3;
    private JRadioButton jRadioButton1;
    private JRadioButton jRadioButton2;
    private JRadioButton jRadioButton3;
    private JRadioButton jRadioButton4;
    private JRadioButton jRadioButton5;
    private JRadioButton jRadioButton6;
    private JScrollPane jScrollPane1;
    private JScrollPane jScrollPane2;
    private JTextArea jTextArea1;
    private String title;
    private String className;
    private StudentController studentController;
    private List<Question> questions;
    private boolean[] correctAnswers;

    // End of variables declaration
}
